{
  "version": 3,
  "file": "nsis-updater.js",
  "sourceRoot": "",
  "sources": [
    "../../../src/nsis-updater.ts"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "import { EventEmitter } from \"events\"\nimport { spawn } from \"child_process\"\nimport * as path from \"path\"\nimport { tmpdir } from \"os\"\nimport { BintrayClient, BintrayOptions } from \"../../src/publish/bintray\"\nimport { HttpError } from \"../../src/publish/restApiRequest\"\nimport semver = require(\"semver\")\nimport { download } from \"../../src/util/httpRequest\"\nimport { Provider, VersionInfo, UpdateCheckResult, FileInfo } from \"./api\"\n\n//noinspection JSUnusedLocalSymbols\nconst __awaiter = require(\"../../src/util/awaiter\")\n\nclass BintrayProvider implements Provider {\n  private client: BintrayClient\n\n  constructor(configuration: BintrayOptions) {\n    this.client = new BintrayClient(configuration.user, configuration.package, configuration.repo)\n  }\n\n  async getLatestVersion(): Promise<VersionInfo> {\n    try {\n      const data = await this.client.getVersion(\"_latest\")\n      return {\n        version: data.name,\n      }\n    }\n    catch (e) {\n      if (e instanceof HttpError && e.response.statusCode === 404) {\n        throw new Error(`No latest version, please ensure that user, package and repository correctly configured. Or at least one version is published. ${e.stack || e.message}`)\n      }\n      throw e\n    }\n  }\n\n  async getUpdateFile(versionInfo: VersionInfo): Promise<FileInfo> {\n    try {\n      const files = await this.client.getVersionFiles(versionInfo.version)\n      const suffix = `${versionInfo.version}.exe`\n      for (let file of files) {\n        if (file.name.endsWith(suffix) && file.name.includes(\"Setup\")) {\n          return {\n            url: \"\"\n          }\n        }\n      }\n\n      //noinspection ExceptionCaughtLocallyJS\n      throw new Error(`Cannot find suitable file for version ${versionInfo.version} in: ${JSON.stringify(files, null, 2)}`)\n    }\n    catch (e) {\n      if (e instanceof HttpError && e.response.statusCode === 404) {\n        throw new Error(`No latest version, please ensure that user, package and repository correctly configured. Or at least one version is published. ${e.stack || e.message}`)\n      }\n      throw e\n    }\n  }\n}\n\nexport class NsisUpdater extends EventEmitter {\n  private setupPath = path.join(tmpdir(), 'innobox-upgrade.exe')\n\n  private updateAvailable = false\n  private quitAndInstallCalled = false\n\n  private client: Provider\n\n  private readonly app: any\n\n  constructor(public updateUrl?: string) {\n    super()\n\n    this.app = (<any>global).__test_app || require(\"electron\").app\n  }\n\n  getFeedURL(): string | null | undefined {\n    return this.updateUrl\n  }\n\n  setFeedURL(value: string | BintrayOptions) {\n    this.updateUrl = value.toString()\n\n    this.client = new BintrayProvider(<BintrayOptions>value)\n  }\n\n  async checkForUpdates(): Promise<UpdateCheckResult> {\n    if (this.updateUrl == null) {\n      const message = \"Update URL is not set\"\n      this.emitError(message)\n      throw new Error(message)\n    }\n\n    this.emit(\"checking-for-update\")\n    const versionInfo = await this.client.getLatestVersion()\n\n    const latestVersion = semver.valid(versionInfo.version)\n    if (latestVersion == null) {\n      const error = `Latest version (from update server) is not valid semver version: \"${latestVersion}`\n      this.emitError(error)\n      throw new Error(error)\n    }\n\n    const currentVersion = semver.valid(this.app.getVersion())\n    if (currentVersion == null) {\n      const error = `App version is not valid semver version: \"${currentVersion}`\n      this.emitError(error)\n      throw new Error(error)\n    }\n\n    if (semver.gte(currentVersion, latestVersion)) {\n      this.updateAvailable = false\n      this.emit(\"update-not-available\")\n      return {\n        versionInfo: versionInfo,\n      }\n    }\n\n    this.updateAvailable = true\n    this.emit(\"update-available\")\n\n    return {\n      versionInfo: versionInfo,\n      downloadPromise: this.client.getUpdateFile(versionInfo)\n        .then(it => {}),\n    }\n  }\n\n  quitAndInstall(): void {\n    if (!this.updateAvailable) {\n      this.emitError(\"No update available, can't quit and install\")\n      return\n    }\n\n    if (this.quitAndInstallCalled) {\n      return\n    }\n\n    // prevent calling several times\n    this.quitAndInstallCalled = true\n\n    spawn(this.setupPath, [\"/S\"], {\n      detached: true,\n      stdio: \"ignore\",\n    }).unref()\n\n    this.app.quit()\n  }\n\n  // emit both error object and message, this is to keep compatibility with old APIs\n  private emitError (message: string) {\n    return this.emit(\"error\", new Error(message), message)\n  }\n}"
  ]
}
